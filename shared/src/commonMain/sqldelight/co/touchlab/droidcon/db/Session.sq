import kotlinx.datetime.Instant;
import kotlin.Int;

CREATE TABLE sessionTable(
    id TEXT NOT NULL,
    conferenceId INTEGER NOT NULL,
    title TEXT NOT NULL,
    description TEXT,
    startsAt INTEGER AS Instant NOT NULL,
    endsAt INTEGER AS Instant NOT NULL,
    serviceSession INTEGER NOT NULL DEFAULT 0,
    rsvp INTEGER,
    rsvpSent INTEGER NOT NULL DEFAULT 0,
    roomId INTEGER,
    feedbackRating INTEGER AS Int,
    feedbackComment TEXT,
    feedbackSent INTEGER NOT NULL DEFAULT 0,
    PRIMARY KEY (id, conferenceId),
    FOREIGN KEY (roomId) REFERENCES roomTable(id),
    FOREIGN KEY (conferenceId) REFERENCES conferenceTable(id)
);

upsert:
INSERT OR REPLACE INTO sessionTable(id, conferenceId, title, description, startsAt, endsAt, serviceSession, roomId, rsvp, rsvpSent, feedbackRating, feedbackComment, feedbackSent)
VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?);

deleteById {
    DELETE FROM sessionSpeakerTable WHERE sessionId = :sessionId;
    DELETE FROM sessionTable WHERE id = :sessionId AND conferenceId = :conferenceId;
}

allSessions:
SELECT * FROM sessionTable ORDER BY sessionTable.startsAt ASC;

attendingSessions:
SELECT * FROM sessionTable WHERE rsvp != 0 ORDER BY sessionTable.startsAt ASC;

existsById:
SELECT count(1) FROM sessionTable WHERE id = ?;

sessionById:
SELECT * FROM sessionTable WHERE id = ?;

mySessions:
SELECT sessionTable.id, sessionTable.title, sessionTable.startsAt, sessionTable.endsAt, sessionTable.feedbackRating, roomTable.name AS roomName
FROM sessionTable
JOIN roomTable ON sessionTable.roomId = roomTable.id
WHERE rsvp != 0 ORDER BY sessionTable.startsAt ASC;

myPastSession:
SELECT sessionTable.id, sessionTable.title, sessionTable.endsAt, sessionTable.feedbackRating
FROM sessionTable
WHERE rsvp != 0 AND sessionTable.feedbackRating IS NULL;

userSessions:
SELECT sessionTable.* FROM sessionTable
JOIN sessionSpeakerTable ON sessionTable.id = sessionSpeakerTable.sessionId
WHERE sessionSpeakerTable.speakerId = ?;

updateRsvp:
UPDATE sessionTable SET rsvp = ? WHERE id = ?;

updateRsvpSent:
UPDATE sessionTable SET rsvpSent = ? WHERE id = :sessionId;

updateFeedBack:
UPDATE sessionTable SET feedbackRating = ?, feedbackComment = ?, feedbackSent = 0 WHERE id = :sessionId;

updateFeedBackSent:
UPDATE sessionTable SET feedbackSent = ? WHERE id = :sessionId;

sessionFeedbackToSend:
SELECT * FROM sessionTable WHERE feedbackRating IS NOT NULL AND feedbackSent = 0;

--Special query for schedule view
sessionWithRoom:
SELECT
    sessionTable.id, sessionTable.title, sessionTable.description, sessionTable.startsAt, sessionTable.endsAt,
    sessionTable.serviceSession, sessionTable.rsvp, sessionTable.roomId, roomTable.name AS roomName,
    speakers.allNames
FROM sessionTable
LEFT JOIN (
    SELECT sessionId, group_concat(fullName, ', ') AS allNames
    FROM sessionSpeakerTable
    JOIN profileTable ON profileTable.id = sessionSpeakerTable.speakerId
    GROUP BY sessionId
) AS speakers ON speakers.sessionId = sessionTable.id
JOIN roomTable ON sessionTable.roomId = roomTable.id;